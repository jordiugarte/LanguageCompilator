/*
 * generated by Xtext 2.21.0
 */
grammar InternalPerronix;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.upb.lp.isc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.upb.lp.isc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.upb.lp.isc.services.PerronixGrammarAccess;

}

@parser::members {

 	private PerronixGrammarAccess grammarAccess;

    public InternalPerronixParser(TokenStream input, PerronixGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MyRacketProgram";
   	}

   	@Override
   	protected PerronixGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMyRacketProgram
entryRuleMyRacketProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMyRacketProgramRule()); }
	iv_ruleMyRacketProgram=ruleMyRacketProgram
	{ $current=$iv_ruleMyRacketProgram.current; }
	EOF;

// Rule MyRacketProgram
ruleMyRacketProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Definitions'
			{
				newLeafNode(otherlv_0, grammarAccess.getMyRacketProgramAccess().getDefinitionsKeyword_0_0());
			}
			otherlv_1=':'
			{
				newLeafNode(otherlv_1, grammarAccess.getMyRacketProgramAccess().getColonKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMyRacketProgramAccess().getDefinesDefineParserRuleCall_0_2_0());
					}
					lv_defines_2_0=ruleDefine
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMyRacketProgramRule());
						}
						add(
							$current,
							"defines",
							lv_defines_2_0,
							"edu.upb.lp.isc.Perronix.Define");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		otherlv_3='Executions'
		{
			newLeafNode(otherlv_3, grammarAccess.getMyRacketProgramAccess().getExecutionsKeyword_1());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getMyRacketProgramAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMyRacketProgramAccess().getExecutionsExpressionParserRuleCall_3_0());
				}
				lv_executions_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMyRacketProgramRule());
					}
					add(
						$current,
						"executions",
						lv_executions_5_0,
						"edu.upb.lp.isc.Perronix.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleDefine
entryRuleDefine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefineRule()); }
	iv_ruleDefine=ruleDefine
	{ $current=$iv_ruleDefine.current; }
	EOF;

// Rule Define
ruleDefine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='define'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefineAccess().getDefineKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getDefineAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getDefineAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefineRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_params_4_0=RULE_ID
				{
					newLeafNode(lv_params_4_0, grammarAccess.getDefineAccess().getParamsIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefineRule());
					}
					addWithLastConsumed(
						$current,
						"params",
						lv_params_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getDefineAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefineAccess().getBodyExpressionParserRuleCall_6_0());
				}
				lv_body_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefineRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"edu.upb.lp.isc.Perronix.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getDefineAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_0());
		}
		this_SimpleExpression_0=ruleSimpleExpression
		{
			$current = $this_SimpleExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getArithExpressionParserRuleCall_1());
		}
		this_ArithExpression_1=ruleArithExpression
		{
			$current = $this_ArithExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getIfExpressionParserRuleCall_2());
		}
		this_IfExpression_2=ruleIfExpression
		{
			$current = $this_IfExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getFunctionCallExpressionParserRuleCall_3());
		}
		this_FunctionCallExpression_3=ruleFunctionCallExpression
		{
			$current = $this_FunctionCallExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getListIntParserRuleCall_4());
		}
		this_ListInt_4=ruleListInt
		{
			$current = $this_ListInt_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getListDoubleParserRuleCall_5());
		}
		this_ListDouble_5=ruleListDouble
		{
			$current = $this_ListDouble_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getListStringParserRuleCall_6());
		}
		this_ListString_6=ruleListString
		{
			$current = $this_ListString_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPrintExpressionParserRuleCall_7());
		}
		this_PrintExpression_7=rulePrintExpression
		{
			$current = $this_PrintExpression_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getLengthListParserRuleCall_8());
		}
		this_LengthList_8=ruleLengthList
		{
			$current = $this_LengthList_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getListTailParserRuleCall_9());
		}
		this_ListTail_9=ruleListTail
		{
			$current = $this_ListTail_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	iv_ruleSimpleExpression=ruleSimpleExpression
	{ $current=$iv_ruleSimpleExpression.current; }
	EOF;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getSimpleExpressionAccess().getIntExpressionParserRuleCall());
	}
	this_IntExpression_0=ruleIntExpression
	{
		$current = $this_IntExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePrintExpression
entryRulePrintExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintExpressionRule()); }
	iv_rulePrintExpression=rulePrintExpression
	{ $current=$iv_rulePrintExpression.current; }
	EOF;

// Rule PrintExpression
rulePrintExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrintExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			otherlv_1='print'
			{
				newLeafNode(otherlv_1, grammarAccess.getPrintExpressionAccess().getPrintKeyword_0_1());
			}
			(
				(
					lv_value_2_0=RULE_INT
					{
						newLeafNode(lv_value_2_0, grammarAccess.getPrintExpressionAccess().getValueINTTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrintExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrintExpressionAccess().getDoubleExpressionParserRuleCall_1());
		}
		this_DoubleExpression_3=ruleDoubleExpression
		{
			$current = $this_DoubleExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			this_STRING_4=RULE_STRING
			{
				newLeafNode(this_STRING_4, grammarAccess.getPrintExpressionAccess().getSTRINGTerminalRuleCall_2_0());
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrintExpressionAccess().getRightParenthesisKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleIntExpression
entryRuleIntExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntExpressionRule()); }
	iv_ruleIntExpression=ruleIntExpression
	{ $current=$iv_ruleIntExpression.current; }
	EOF;

// Rule IntExpression
ruleIntExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntExpressionAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleDoubleExpression
entryRuleDoubleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoubleExpressionRule()); }
	iv_ruleDoubleExpression=ruleDoubleExpression
	{ $current=$iv_ruleDoubleExpression.current; }
	EOF;

// Rule DoubleExpression
ruleDoubleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_INT
				{
					newLeafNode(lv_value_0_0, grammarAccess.getDoubleExpressionAccess().getValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDoubleExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getDoubleExpressionAccess().getFullStopKeyword_1());
		}
		(
			this_INT_2=RULE_INT
			{
				newLeafNode(this_INT_2, grammarAccess.getDoubleExpressionAccess().getINTTerminalRuleCall_2());
			}
		)+
	)
;

// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	iv_ruleStringExpression=ruleStringExpression
	{ $current=$iv_ruleStringExpression.current; }
	EOF;

// Rule StringExpression
ruleStringExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleArithExpression
entryRuleArithExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithExpressionRule()); }
	iv_ruleArithExpression=ruleArithExpression
	{ $current=$iv_ruleArithExpression.current; }
	EOF;

// Rule ArithExpression
ruleArithExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getArithExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					lv_op_1_1='+'
					{
						newLeafNode(lv_op_1_1, grammarAccess.getArithExpressionAccess().getOpPlusSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_1, null);
					}
					    |
					lv_op_1_2='-'
					{
						newLeafNode(lv_op_1_2, grammarAccess.getArithExpressionAccess().getOpHyphenMinusKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_2, null);
					}
					    |
					lv_op_1_3='*'
					{
						newLeafNode(lv_op_1_3, grammarAccess.getArithExpressionAccess().getOpAsteriskKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_3, null);
					}
					    |
					lv_op_1_4='/'
					{
						newLeafNode(lv_op_1_4, grammarAccess.getArithExpressionAccess().getOpSolidusKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getArithExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_4, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArithExpressionAccess().getArgsExpressionParserRuleCall_2_0());
				}
				lv_args_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_2_0,
						"edu.upb.lp.isc.Perronix.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArithExpressionAccess().getArgsExpressionParserRuleCall_3_0());
				}
				lv_args_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArithExpressionRule());
					}
					add(
						$current,
						"args",
						lv_args_3_0,
						"edu.upb.lp.isc.Perronix.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getArithExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleIfExpression
entryRuleIfExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfExpressionRule()); }
	iv_ruleIfExpression=ruleIfExpression
	{ $current=$iv_ruleIfExpression.current; }
	EOF;

// Rule IfExpression
ruleIfExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfExpressionAccess().getIfKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getCondExpressionParserRuleCall_3_0());
				}
				lv_cond_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"cond",
						lv_cond_3_0,
						"edu.upb.lp.isc.Perronix.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getThenExpressionParserRuleCall_5_0());
				}
				lv_then_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"then",
						lv_then_5_0,
						"edu.upb.lp.isc.Perronix.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfExpressionAccess().getElseExpressionParserRuleCall_6_0());
				}
				lv_else_6_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfExpressionRule());
					}
					set(
						$current,
						"else",
						lv_else_6_0,
						"edu.upb.lp.isc.Perronix.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleFunctionCallExpression
entryRuleFunctionCallExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallExpressionRule()); }
	iv_ruleFunctionCallExpression=ruleFunctionCallExpression
	{ $current=$iv_ruleFunctionCallExpression.current; }
	EOF;

// Rule FunctionCallExpression
ruleFunctionCallExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionCallExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFunctionCallExpressionAccess().getFunctionDefineCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallExpressionAccess().getArgsExpressionParserRuleCall_2_0());
				}
				lv_args_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionCallExpressionRule());
					}
					set(
						$current,
						"args",
						lv_args_2_0,
						"edu.upb.lp.isc.Perronix.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionCallExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleListInt
entryRuleListInt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListIntRule()); }
	iv_ruleListInt=ruleListInt
	{ $current=$iv_ruleListInt.current; }
	EOF;

// Rule ListInt
ruleListInt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListIntAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='list'
		{
			newLeafNode(otherlv_1, grammarAccess.getListIntAccess().getListKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListIntAccess().getSIntExpressionParserRuleCall_2_0());
				}
				lv_s_2_0=ruleIntExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListIntRule());
					}
					add(
						$current,
						"s",
						lv_s_2_0,
						"edu.upb.lp.isc.Perronix.IntExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getListIntAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleListDouble
entryRuleListDouble returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListDoubleRule()); }
	iv_ruleListDouble=ruleListDouble
	{ $current=$iv_ruleListDouble.current; }
	EOF;

// Rule ListDouble
ruleListDouble returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListDoubleAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='list'
		{
			newLeafNode(otherlv_1, grammarAccess.getListDoubleAccess().getListKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListDoubleAccess().getTDoubleExpressionParserRuleCall_2_0());
				}
				lv_t_2_0=ruleDoubleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListDoubleRule());
					}
					add(
						$current,
						"t",
						lv_t_2_0,
						"edu.upb.lp.isc.Perronix.DoubleExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getListDoubleAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleListString
entryRuleListString returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListStringRule()); }
	iv_ruleListString=ruleListString
	{ $current=$iv_ruleListString.current; }
	EOF;

// Rule ListString
ruleListString returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListStringAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='list'
		{
			newLeafNode(otherlv_1, grammarAccess.getListStringAccess().getListKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListStringAccess().getTStringExpressionParserRuleCall_2_0());
				}
				lv_t_2_0=ruleStringExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListStringRule());
					}
					add(
						$current,
						"t",
						lv_t_2_0,
						"edu.upb.lp.isc.Perronix.StringExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getListStringAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLengthList
entryRuleLengthList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLengthListRule()); }
	iv_ruleLengthList=ruleLengthList
	{ $current=$iv_ruleLengthList.current; }
	EOF;

// Rule LengthList
ruleLengthList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getLengthListAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='length'
		{
			newLeafNode(otherlv_1, grammarAccess.getLengthListAccess().getLengthKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getLengthListAccess().getListIntParserRuleCall_2());
		}
		this_ListInt_2=ruleListInt
		{
			$current = $this_ListInt_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLengthListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleListTail
entryRuleListTail returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListTailRule()); }
	iv_ruleListTail=ruleListTail
	{ $current=$iv_ruleListTail.current; }
	EOF;

// Rule ListTail
ruleListTail returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getListTailAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='list-tail'
		{
			newLeafNode(otherlv_1, grammarAccess.getListTailAccess().getListTailKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getListTailAccess().getListIntParserRuleCall_2());
		}
		this_ListInt_2=ruleListInt
		{
			$current = $this_ListInt_2.current;
			afterParserOrEnumRuleCall();
		}
		this_INT_3=RULE_INT
		{
			newLeafNode(this_INT_3, grammarAccess.getListTailAccess().getINTTerminalRuleCall_3());
		}
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getListTailAccess().getRightParenthesisKeyword_4());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
