/**
 * generated by Xtext 2.21.0
 */
package edu.upb.lp.isc.perronix.impl;

import edu.upb.lp.isc.perronix.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PerronixFactoryImpl extends EFactoryImpl implements PerronixFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PerronixFactory init()
  {
    try
    {
      PerronixFactory thePerronixFactory = (PerronixFactory)EPackage.Registry.INSTANCE.getEFactory(PerronixPackage.eNS_URI);
      if (thePerronixFactory != null)
      {
        return thePerronixFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PerronixFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PerronixFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PerronixPackage.MY_RACKET_PROGRAM: return createMyRacketProgram();
      case PerronixPackage.DEFINE: return createDefine();
      case PerronixPackage.EXPRESSION: return createExpression();
      case PerronixPackage.SIMPLE_EXPRESSION: return createSimpleExpression();
      case PerronixPackage.PRINT_EXPRESSION: return createPrintExpression();
      case PerronixPackage.INT_EXPRESSION: return createIntExpression();
      case PerronixPackage.DOUBLE_EXPRESSION: return createDoubleExpression();
      case PerronixPackage.STRING_EXPRESSION: return createStringExpression();
      case PerronixPackage.ARITH_EXPRESSION: return createArithExpression();
      case PerronixPackage.IF_EXPRESSION: return createIfExpression();
      case PerronixPackage.FUNCTION_CALL_EXPRESSION: return createFunctionCallExpression();
      case PerronixPackage.LIST_INT: return createListInt();
      case PerronixPackage.LIST_DOUBLE: return createListDouble();
      case PerronixPackage.LIST_STRING: return createListString();
      case PerronixPackage.LENGTH_LIST: return createLengthList();
      case PerronixPackage.LIST_TAIL: return createListTail();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyRacketProgram createMyRacketProgram()
  {
    MyRacketProgramImpl myRacketProgram = new MyRacketProgramImpl();
    return myRacketProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Define createDefine()
  {
    DefineImpl define = new DefineImpl();
    return define;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleExpression createSimpleExpression()
  {
    SimpleExpressionImpl simpleExpression = new SimpleExpressionImpl();
    return simpleExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrintExpression createPrintExpression()
  {
    PrintExpressionImpl printExpression = new PrintExpressionImpl();
    return printExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntExpression createIntExpression()
  {
    IntExpressionImpl intExpression = new IntExpressionImpl();
    return intExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleExpression createDoubleExpression()
  {
    DoubleExpressionImpl doubleExpression = new DoubleExpressionImpl();
    return doubleExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringExpression createStringExpression()
  {
    StringExpressionImpl stringExpression = new StringExpressionImpl();
    return stringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithExpression createArithExpression()
  {
    ArithExpressionImpl arithExpression = new ArithExpressionImpl();
    return arithExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfExpression createIfExpression()
  {
    IfExpressionImpl ifExpression = new IfExpressionImpl();
    return ifExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallExpression createFunctionCallExpression()
  {
    FunctionCallExpressionImpl functionCallExpression = new FunctionCallExpressionImpl();
    return functionCallExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListInt createListInt()
  {
    ListIntImpl listInt = new ListIntImpl();
    return listInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListDouble createListDouble()
  {
    ListDoubleImpl listDouble = new ListDoubleImpl();
    return listDouble;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListString createListString()
  {
    ListStringImpl listString = new ListStringImpl();
    return listString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LengthList createLengthList()
  {
    LengthListImpl lengthList = new LengthListImpl();
    return lengthList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ListTail createListTail()
  {
    ListTailImpl listTail = new ListTailImpl();
    return listTail;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PerronixPackage getPerronixPackage()
  {
    return (PerronixPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PerronixPackage getPackage()
  {
    return PerronixPackage.eINSTANCE;
  }

} //PerronixFactoryImpl
